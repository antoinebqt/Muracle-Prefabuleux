package ca.ulaval.glo2004.gui;

import ca.ulaval.glo2004.domaine.dtos.SalleParamDTO;
import ca.ulaval.glo2004.gui.Enum.ModeApplication;
import ca.ulaval.glo2004.domaine.ControleurSalle;
import ca.ulaval.glo2004.domaine.dtos.AccessoireParamDTO;
import ca.ulaval.glo2004.domaine.dtos.ImperialPointDTO;
import ca.ulaval.glo2004.domaine.dtos.MurParamDTO;
import ca.ulaval.glo2004.domaine.dtos.SeparateurParamDTO;
import ca.ulaval.glo2004.gui.Enum.Face;
import ca.ulaval.glo2004.gui.Enum.Orientation;
import ca.ulaval.glo2004.gui.Enum.ModeVue;
import ca.ulaval.glo2004.gui.Enum.TypeAccessoire;
import ca.ulaval.glo2004.gui.Enum.TypePolygone;
import java.awt.Color;
import java.awt.Point;
import java.io.IOException;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;


public class MainWindow extends javax.swing.JFrame {

    private ModeVue modeVue = ModeVue.DESSUS;
    private ModeApplication modeApplication = ModeApplication.DEPLACEMENT;
    private Face face = Face.INTERIEUR;
    private Orientation orientation;
    private boolean hasMoved = false;
    
    private static final double INITIAL_ZOOM = 0.03;
    
    private ControleurSalle controleur;
    private ElementCouleur elementCouleur;
    
    public MainWindow() {
        
        controleur = new ControleurSalle();
        elementCouleur = new ElementCouleur();
       
        initComponents();
        canvas.setBorder(BorderFactory.createEmptyBorder());
        boutonDessus.setSelected(true);
        boutonDeplacement.setSelected(true);
        boutonPlan.setEnabled(false);
        faceComboBox.setEnabled(false);
        labelPositionSouris.setVisible(false);
        menuExporterPlanMur.setEnabled(false);
        canvas.setFacteurZoom(INITIAL_ZOOM);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM);
        boutonUndo.setEnabled(controleur.canUndo());
        boutonRedo.setEnabled(controleur.canRedo());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        boutonsVues = new javax.swing.ButtonGroup();
        boutonsMode = new javax.swing.ButtonGroup();
        panelOptionsAccessoire = new javax.swing.JPanel();
        labelTitreAccessoire = new javax.swing.JLabel();
        labelPouceAccessoire = new javax.swing.JLabel();
        jSeparatorPouceAccessoire = new javax.swing.JSeparator();
        labelPositionXAccessoire = new javax.swing.JLabel();
        tfPositionXAccessoire = new javax.swing.JTextField();
        labelPositionYAccessoire = new javax.swing.JLabel();
        tfPositionYAccessoire = new javax.swing.JTextField();
        labelLongueurAccessoire = new javax.swing.JLabel();
        tfLongueurAccessoire = new javax.swing.JTextField();
        labelHauteurAccessoire = new javax.swing.JLabel();
        tfHauteurAccessoire = new javax.swing.JTextField();
        boutonApplyAccessoire = new javax.swing.JButton();
        boutonCancelAccessoire = new javax.swing.JButton();
        boutonDeleteAccessoire = new javax.swing.JButton();
        panelOptionsMur = new javax.swing.JPanel();
        labelTitreMur = new javax.swing.JLabel();
        jSeparatorPouceMur = new javax.swing.JSeparator();
        labelPouceMur = new javax.swing.JLabel();
        labelPositionXMur = new javax.swing.JLabel();
        tfPositionXMur = new javax.swing.JTextField();
        labelLongueurMur = new javax.swing.JLabel();
        tfLongueurMur = new javax.swing.JTextField();
        tfHauteurMur = new javax.swing.JTextField();
        labelHauteurMur = new javax.swing.JLabel();
        labelLivreMur = new javax.swing.JLabel();
        jSeparatorLivreMur = new javax.swing.JSeparator();
        labelPoidsInterieur = new javax.swing.JLabel();
        tfPoidsInterieur = new javax.swing.JTextField();
        tfPoidsExterieur = new javax.swing.JTextField();
        labelPoidsExterieur = new javax.swing.JLabel();
        panelOptionsSeparateur = new javax.swing.JPanel();
        labelTitreSeparateur = new javax.swing.JLabel();
        labelPouceSeparateur = new javax.swing.JLabel();
        jSeparatorPouceSeparateur = new javax.swing.JSeparator();
        labelPositionSeparateur = new javax.swing.JLabel();
        tfPositionSeparateur = new javax.swing.JTextField();
        boutonApplySeparateur = new javax.swing.JButton();
        boutonCancelSeparateur = new javax.swing.JButton();
        boutonDeleteSeparateur = new javax.swing.JButton();
        labelMargeMarche = new javax.swing.JLabel();
        tfMargeMarche = new javax.swing.JTextField();
        mainPanel = new javax.swing.JPanel();
        panelCentral = new javax.swing.JPanel();
        canvas = new ca.ulaval.glo2004.gui.Canvas(this);
        panelMode = new javax.swing.JPanel();
        boutonDeplacement = new javax.swing.JToggleButton();
        boutonSelection = new javax.swing.JToggleButton();
        boutonAjout = new javax.swing.JToggleButton();
        ajoutComboBox = new javax.swing.JComboBox<>();
        labelPositionSouris = new javax.swing.JLabel();
        boutonUndo = new javax.swing.JButton();
        boutonRedo = new javax.swing.JButton();
        panelVues = new javax.swing.JPanel();
        boutonDessus = new javax.swing.JToggleButton();
        boutonNord = new javax.swing.JToggleButton();
        boutonSud = new javax.swing.JToggleButton();
        boutonEst = new javax.swing.JToggleButton();
        boutonOuest = new javax.swing.JToggleButton();
        faceComboBox = new javax.swing.JComboBox<>();
        boutonPlan = new javax.swing.JToggleButton();
        jPanelParametres = new javax.swing.JPanel();
        jScrollPaneTextArea = new javax.swing.JScrollPane();
        jTextAreaErreur = new javax.swing.JTextArea();
        panelParametres = new javax.swing.JTabbedPane();
        panelSalle = new javax.swing.JPanel();
        labelPouce = new javax.swing.JLabel();
        jSeparatorPouce = new javax.swing.JSeparator();
        labelLongueur = new javax.swing.JLabel();
        tfLongueur = new javax.swing.JTextField();
        labelLargeur = new javax.swing.JLabel();
        tfLargeur = new javax.swing.JTextField();
        labelHauteur = new javax.swing.JLabel();
        tfHauteur = new javax.swing.JTextField();
        labelEpaisseur = new javax.swing.JLabel();
        tfEpaisseur = new javax.swing.JTextField();
        labelMargePliage = new javax.swing.JLabel();
        tfMargePliage = new javax.swing.JTextField();
        labelMargeRepli = new javax.swing.JLabel();
        tfMargeRepli = new javax.swing.JTextField();
        labelLongueur5 = new javax.swing.JLabel();
        tfHauteurRetourAir = new javax.swing.JTextField();
        labelDistanceSolRetourAir = new javax.swing.JLabel();
        tfDistanceSolRetourAir = new javax.swing.JTextField();
        labelHauteurTrouRetourAir = new javax.swing.JLabel();
        tfHauteurTrouRetourAir = new javax.swing.JTextField();
        labelLongueurPliSoudure = new javax.swing.JLabel();
        tfLongueurPliSoudure = new javax.swing.JTextField();
        labelDegree = new javax.swing.JLabel();
        jSeparatorDegree = new javax.swing.JSeparator();
        labelAnglePliSoudure = new javax.swing.JLabel();
        tfAnglePliSoudure = new javax.swing.JTextField();
        boutonApply = new javax.swing.JButton();
        boutonCancelSalle = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfEspaceGrille = new javax.swing.JTextField();
        panelSelection = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fichierMenu = new javax.swing.JMenu();
        menuNouveau = new javax.swing.JMenuItem();
        menuOuvrir = new javax.swing.JMenuItem();
        menuEnregistrer = new javax.swing.JMenuItem();
        menuEnregistrerSous = new javax.swing.JMenuItem();
        menuExporterPlanMur = new javax.swing.JMenuItem();
        menuExporterPlanSalle = new javax.swing.JMenuItem();
        editionMenu = new javax.swing.JMenu();
        menuUndo = new javax.swing.JMenuItem();
        menuRedo = new javax.swing.JMenuItem();
        fenetreMenu = new javax.swing.JMenu();
        menuZoom = new javax.swing.JMenu();
        menuZoom25 = new javax.swing.JMenuItem();
        menuZoom50 = new javax.swing.JMenuItem();
        menuZoom75 = new javax.swing.JMenuItem();
        menuZoom100 = new javax.swing.JMenuItem();
        menuZoom125 = new javax.swing.JMenuItem();
        menuZoom150 = new javax.swing.JMenuItem();
        menuZoom175 = new javax.swing.JMenuItem();
        menuZoom200 = new javax.swing.JMenuItem();
        menuVues = new javax.swing.JMenu();
        menuVueDePlan = new javax.swing.JMenuItem();
        menuVuesCote = new javax.swing.JMenu();
        menuVueNord = new javax.swing.JMenuItem();
        menuVueSud = new javax.swing.JMenuItem();
        menuVueOuest = new javax.swing.JMenuItem();
        menuVueEst = new javax.swing.JMenuItem();
        menuChangerCouleur = new javax.swing.JMenuItem();
        jSeparateur = new javax.swing.JPopupMenu.Separator();
        menuResetVue = new javax.swing.JMenuItem();
        menuResetCouleur = new javax.swing.JMenuItem();

        boutonsVues.add(boutonDessus);
        boutonsVues.add(boutonEst);
        boutonsVues.add(boutonSud);
        boutonsVues.add(boutonOuest);
        boutonsVues.add(boutonNord);
        boutonsVues.add(boutonPlan);

        boutonsMode.add(boutonDeplacement);
        boutonsMode.add(boutonSelection);
        boutonsMode.add(boutonAjout);

        java.awt.GridBagLayout panelOptionsAccessoireLayout = new java.awt.GridBagLayout();
        panelOptionsAccessoireLayout.columnWidths = new int[] {0, 5, 0};
        panelOptionsAccessoireLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        panelOptionsAccessoire.setLayout(panelOptionsAccessoireLayout);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelTitreAccessoire, gridBagConstraints);

        labelPouceAccessoire.setText("Paramètres en pouces");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelPouceAccessoire, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(jSeparatorPouceAccessoire, gridBagConstraints);

        labelPositionXAccessoire.setText("Position X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelPositionXAccessoire, gridBagConstraints);

        tfPositionXAccessoire.setMinimumSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(tfPositionXAccessoire, gridBagConstraints);

        labelPositionYAccessoire.setText("Position Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelPositionYAccessoire, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(tfPositionYAccessoire, gridBagConstraints);

        labelLongueurAccessoire.setText("Longueur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelLongueurAccessoire, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(tfLongueurAccessoire, gridBagConstraints);

        labelHauteurAccessoire.setText("Hauteur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelHauteurAccessoire, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(tfHauteurAccessoire, gridBagConstraints);

        boutonApplyAccessoire.setBackground(new java.awt.Color(51, 204, 0));
        boutonApplyAccessoire.setText("Appliquer");
        boutonApplyAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonApplyAccessoireActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        panelOptionsAccessoire.add(boutonApplyAccessoire, gridBagConstraints);

        boutonCancelAccessoire.setBackground(new java.awt.Color(51, 153, 255));
        boutonCancelAccessoire.setText("Annuler");
        boutonCancelAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonCancelAccessoireActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(boutonCancelAccessoire, gridBagConstraints);

        boutonDeleteAccessoire.setBackground(new java.awt.Color(255, 0, 51));
        boutonDeleteAccessoire.setText("Supprimer");
        boutonDeleteAccessoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonDeleteAccessoireActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(boutonDeleteAccessoire, gridBagConstraints);

        java.awt.GridBagLayout panelOptionsMurLayout = new java.awt.GridBagLayout();
        panelOptionsMurLayout.columnWidths = new int[] {0, 5, 0};
        panelOptionsMurLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        panelOptionsMur.setLayout(panelOptionsMurLayout);

        labelTitreMur.setText("Informations du mur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelTitreMur, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(jSeparatorPouceMur, gridBagConstraints);

        labelPouceMur.setText("Paramètres en pouces");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelPouceMur, gridBagConstraints);

        labelPositionXMur.setText("Position X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelPositionXMur, gridBagConstraints);

        tfPositionXMur.setEditable(false);
        tfPositionXMur.setMinimumSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(tfPositionXMur, gridBagConstraints);

        labelLongueurMur.setText("Longueur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelLongueurMur, gridBagConstraints);

        tfLongueurMur.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(tfLongueurMur, gridBagConstraints);

        tfHauteurMur.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(tfHauteurMur, gridBagConstraints);

        labelHauteurMur.setText("Hauteur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelHauteurMur, gridBagConstraints);

        labelLivreMur.setText("Paramètres en livres");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelLivreMur, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(jSeparatorLivreMur, gridBagConstraints);

        labelPoidsInterieur.setText("Poids du panneau intérieur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelPoidsInterieur, gridBagConstraints);

        tfPoidsInterieur.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(tfPoidsInterieur, gridBagConstraints);

        tfPoidsExterieur.setEditable(false);
        tfPoidsExterieur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPoidsExterieurActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(tfPoidsExterieur, gridBagConstraints);

        labelPoidsExterieur.setText("Poids du panneau extérieur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsMur.add(labelPoidsExterieur, gridBagConstraints);

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        panelOptionsSeparateur.setLayout(jPanel1Layout);

        labelTitreSeparateur.setText("Modification d'un séparateur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(labelTitreSeparateur, gridBagConstraints);

        labelPouceSeparateur.setText("Paramètres en pouces");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(labelPouceSeparateur, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(jSeparatorPouceSeparateur, gridBagConstraints);

        labelPositionSeparateur.setText("Position");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(labelPositionSeparateur, gridBagConstraints);

        tfPositionSeparateur.setMinimumSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(tfPositionSeparateur, gridBagConstraints);

        boutonApplySeparateur.setBackground(new java.awt.Color(51, 204, 0));
        boutonApplySeparateur.setText("Appliquer");
        boutonApplySeparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonApplySeparateurActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        panelOptionsSeparateur.add(boutonApplySeparateur, gridBagConstraints);

        boutonCancelSeparateur.setBackground(new java.awt.Color(51, 153, 255));
        boutonCancelSeparateur.setText("Annuler");
        boutonCancelSeparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonCancelSeparateurActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(boutonCancelSeparateur, gridBagConstraints);

        boutonDeleteSeparateur.setBackground(new java.awt.Color(255, 0, 51));
        boutonDeleteSeparateur.setText("Supprimer");
        boutonDeleteSeparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonDeleteSeparateurActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsSeparateur.add(boutonDeleteSeparateur, gridBagConstraints);

        labelMargeMarche.setText("Marge de marche");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Muracle Préfabuleux");

        mainPanel.setLayout(new java.awt.BorderLayout());

        panelCentral.setPreferredSize(new java.awt.Dimension(684, 127));
        panelCentral.setLayout(new java.awt.BorderLayout());

        canvas.setBackground(new java.awt.Color(102, 102, 102));
        canvas.setPreferredSize(new java.awt.Dimension(0, 0));
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
        });
        canvas.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvasMouseWheelMoved(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 684, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1026, Short.MAX_VALUE)
        );

        panelCentral.add(canvas, java.awt.BorderLayout.CENTER);

        boutonDeplacement.setText("Déplacement");
        boutonDeplacement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonDeplacementActionPerformed(evt);
            }
        });
        panelMode.add(boutonDeplacement);

        boutonSelection.setText("Sélection");
        boutonSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonSelectionActionPerformed(evt);
            }
        });
        panelMode.add(boutonSelection);

        boutonAjout.setText("Ajout");
        boutonAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAjoutActionPerformed(evt);
            }
        });
        panelMode.add(boutonAjout);

        ajoutComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Séparateur", "Fenêtre", "Porte", "Prise", "Retour Air" }));
        panelMode.add(ajoutComboBox);

        labelPositionSouris.setText("Position du curseur en pouce : ");
        panelMode.add(labelPositionSouris);

        boutonUndo.setText("Undo");
        boutonUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonUndoActionPerformed(evt);
            }
        });
        panelMode.add(boutonUndo);

        boutonRedo.setText("Redo");
        boutonRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonRedoActionPerformed(evt);
            }
        });
        panelMode.add(boutonRedo);

        panelCentral.add(panelMode, java.awt.BorderLayout.PAGE_START);

        panelVues.setBackground(new java.awt.Color(153, 153, 153));
        panelVues.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        panelVues.setLayout(new javax.swing.BoxLayout(panelVues, javax.swing.BoxLayout.LINE_AXIS));

        boutonDessus.setText("Vue du Dessus");
        boutonDessus.setMaximumSize(new java.awt.Dimension(1000, 23));
        boutonDessus.setMinimumSize(new java.awt.Dimension(100, 23));
        boutonDessus.setPreferredSize(new java.awt.Dimension(400, 23));
        boutonDessus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonDessusActionPerformed(evt);
            }
        });
        panelVues.add(boutonDessus);

        boutonNord.setText("Vue Côté Nord");
        boutonNord.setMaximumSize(new java.awt.Dimension(1000, 23));
        boutonNord.setMinimumSize(new java.awt.Dimension(100, 23));
        boutonNord.setPreferredSize(new java.awt.Dimension(400, 23));
        boutonNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonNordActionPerformed(evt);
            }
        });
        panelVues.add(boutonNord);

        boutonSud.setText("Vue Côté Sud");
        boutonSud.setMaximumSize(new java.awt.Dimension(1000, 23));
        boutonSud.setMinimumSize(new java.awt.Dimension(100, 23));
        boutonSud.setPreferredSize(new java.awt.Dimension(400, 23));
        boutonSud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonSudActionPerformed(evt);
            }
        });
        panelVues.add(boutonSud);

        boutonEst.setText("Vue Côté Est");
        boutonEst.setMaximumSize(new java.awt.Dimension(1000, 23));
        boutonEst.setMinimumSize(new java.awt.Dimension(100, 23));
        boutonEst.setPreferredSize(new java.awt.Dimension(400, 23));
        boutonEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonEstActionPerformed(evt);
            }
        });
        panelVues.add(boutonEst);

        boutonOuest.setText("Vue Côté Ouest");
        boutonOuest.setMaximumSize(new java.awt.Dimension(1000, 23));
        boutonOuest.setMinimumSize(new java.awt.Dimension(100, 23));
        boutonOuest.setPreferredSize(new java.awt.Dimension(400, 23));
        boutonOuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonOuestActionPerformed(evt);
            }
        });
        panelVues.add(boutonOuest);

        faceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Intérieur", "Extérieur" }));
        faceComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                faceComboBoxItemStateChanged(evt);
            }
        });
        panelVues.add(faceComboBox);

        boutonPlan.setText("Vue Plan de Découpe");
        boutonPlan.setMaximumSize(new java.awt.Dimension(1000, 23));
        boutonPlan.setMinimumSize(new java.awt.Dimension(100, 23));
        boutonPlan.setPreferredSize(new java.awt.Dimension(600, 23));
        boutonPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonPlanActionPerformed(evt);
            }
        });
        panelVues.add(boutonPlan);

        panelCentral.add(panelVues, java.awt.BorderLayout.PAGE_END);

        mainPanel.add(panelCentral, java.awt.BorderLayout.CENTER);

        jPanelParametres.setLayout(new java.awt.BorderLayout());

        jScrollPaneTextArea.setPreferredSize(new java.awt.Dimension(234, 200));

        jTextAreaErreur.setEditable(false);
        jTextAreaErreur.setColumns(20);
        jTextAreaErreur.setLineWrap(true);
        jTextAreaErreur.setRows(5);
        jScrollPaneTextArea.setViewportView(jTextAreaErreur);

        jPanelParametres.add(jScrollPaneTextArea, java.awt.BorderLayout.SOUTH);

        panelParametres.setPreferredSize(new java.awt.Dimension(400, 697));
        panelParametres.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                panelParametresStateChanged(evt);
            }
        });

        panelSalle.setAlignmentY(1.0F);
        panelSalle.setPreferredSize(new java.awt.Dimension(500, 200));
        java.awt.GridBagLayout panelSalleLayout = new java.awt.GridBagLayout();
        panelSalleLayout.columnWidths = new int[] {0, 5, 0};
        panelSalleLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        panelSalle.setLayout(panelSalleLayout);

        labelPouce.setText("Paramètres en pouces");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelPouce, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(jSeparatorPouce, gridBagConstraints);

        labelLongueur.setText("Longueur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelLongueur, gridBagConstraints);

        tfLongueur.setMinimumSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfLongueur, gridBagConstraints);

        labelLargeur.setText("Largeur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelLargeur, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfLargeur, gridBagConstraints);

        labelHauteur.setText("Hauteur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelHauteur, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfHauteur, gridBagConstraints);

        labelEpaisseur.setText("Epaisseur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelEpaisseur, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfEpaisseur, gridBagConstraints);

        labelMargePliage.setText("Marge de pliage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelMargePliage, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfMargePliage, gridBagConstraints);

        labelMargeRepli.setText("Marge de repli");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelMargeRepli, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfMargeRepli, gridBagConstraints);

        labelLongueur5.setText("Hauteur retour d'air");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelLongueur5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfHauteurRetourAir, gridBagConstraints);

        labelDistanceSolRetourAir.setText("Distance sol retour d'air");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelDistanceSolRetourAir, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfDistanceSolRetourAir, gridBagConstraints);

        labelHauteurTrouRetourAir.setText("Hauteur trou retour d'air");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelHauteurTrouRetourAir, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfHauteurTrouRetourAir, gridBagConstraints);

        labelLongueurPliSoudure.setText("Longueur pli soudure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelLongueurPliSoudure, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfLongueurPliSoudure, gridBagConstraints);

        labelDegree.setText("Paramètres en degrée");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panelSalle.add(labelDegree, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panelSalle.add(jSeparatorDegree, gridBagConstraints);

        labelAnglePliSoudure.setText("Angle du pli de soudure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(labelAnglePliSoudure, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfAnglePliSoudure, gridBagConstraints);

        boutonApply.setBackground(new java.awt.Color(51, 204, 0));
        boutonApply.setText("Appliquer");
        boutonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonApplyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        panelSalle.add(boutonApply, gridBagConstraints);

        boutonCancelSalle.setBackground(new java.awt.Color(51, 153, 255));
        boutonCancelSalle.setText("Annuler");
        boutonCancelSalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonCancelSalleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(boutonCancelSalle, gridBagConstraints);

        jLabel1.setText("Espacement de la grille");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(jLabel1, gridBagConstraints);

        tfEspaceGrille.setText("12");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelSalle.add(tfEspaceGrille, gridBagConstraints);

        panelParametres.addTab("Paramètres de la salle", panelSalle);

        panelSelection.setLayout(new java.awt.GridBagLayout());
        panelParametres.addTab("Paramètres de l'objet sélectioné", panelSelection);

        jPanelParametres.add(panelParametres, java.awt.BorderLayout.CENTER);

        mainPanel.add(jPanelParametres, java.awt.BorderLayout.EAST);

        fichierMenu.setText("Fichier");

        menuNouveau.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuNouveau.setText("Nouveau...");
        menuNouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNouveauActionPerformed(evt);
            }
        });
        fichierMenu.add(menuNouveau);

        menuOuvrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuOuvrir.setText("Ouvrir...");
        menuOuvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOuvrirActionPerformed(evt);
            }
        });
        fichierMenu.add(menuOuvrir);

        menuEnregistrer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuEnregistrer.setText("Enregistrer");
        menuEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEnregistrerActionPerformed(evt);
            }
        });
        fichierMenu.add(menuEnregistrer);

        menuEnregistrerSous.setText("Enregistrer Sous...");
        menuEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEnregistrerSousActionPerformed(evt);
            }
        });
        fichierMenu.add(menuEnregistrerSous);

        menuExporterPlanMur.setText("Exporter Plans Mur");
        menuExporterPlanMur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExporterPlanMurActionPerformed(evt);
            }
        });
        fichierMenu.add(menuExporterPlanMur);

        menuExporterPlanSalle.setText("Exporter Plans Salle");
        menuExporterPlanSalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExporterPlanSalleActionPerformed(evt);
            }
        });
        fichierMenu.add(menuExporterPlanSalle);

        jMenuBar1.add(fichierMenu);

        editionMenu.setText("Edition");
        editionMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                editionMenuMenuSelected(evt);
            }
        });

        menuUndo.setText("Undo");
        menuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUndoActionPerformed(evt);
            }
        });
        editionMenu.add(menuUndo);

        menuRedo.setText("Redo");
        menuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRedoActionPerformed(evt);
            }
        });
        editionMenu.add(menuRedo);

        jMenuBar1.add(editionMenu);

        fenetreMenu.setText("Affichage");

        menuZoom.setText("Zoom");

        menuZoom25.setText("25%");
        menuZoom25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom25ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom25);

        menuZoom50.setText("50%");
        menuZoom50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom50ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom50);

        menuZoom75.setText("75%");
        menuZoom75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom75ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom75);

        menuZoom100.setText("100%");
        menuZoom100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom100ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom100);

        menuZoom125.setText("125%");
        menuZoom125.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom125ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom125);

        menuZoom150.setText("150%");
        menuZoom150.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom150ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom150);

        menuZoom175.setText("175%");
        menuZoom175.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom175ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom175);

        menuZoom200.setText("200%");
        menuZoom200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuZoom200ActionPerformed(evt);
            }
        });
        menuZoom.add(menuZoom200);

        fenetreMenu.add(menuZoom);

        menuVues.setText("Vue");

        menuVueDePlan.setText("Vue de plan");
        menuVueDePlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueDePlanActionPerformed(evt);
            }
        });
        menuVues.add(menuVueDePlan);

        menuVuesCote.setText("Vue de côté");

        menuVueNord.setText("Nord");
        menuVueNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueNordActionPerformed(evt);
            }
        });
        menuVuesCote.add(menuVueNord);

        menuVueSud.setText("Sud");
        menuVueSud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueSudActionPerformed(evt);
            }
        });
        menuVuesCote.add(menuVueSud);

        menuVueOuest.setText("Ouest");
        menuVueOuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueOuestActionPerformed(evt);
            }
        });
        menuVuesCote.add(menuVueOuest);

        menuVueEst.setText("Est");
        menuVueEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVueEstActionPerformed(evt);
            }
        });
        menuVuesCote.add(menuVueEst);

        menuVues.add(menuVuesCote);

        fenetreMenu.add(menuVues);

        menuChangerCouleur.setText("Changer les couleurs");
        menuChangerCouleur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuChangerCouleurActionPerformed(evt);
            }
        });
        fenetreMenu.add(menuChangerCouleur);
        fenetreMenu.add(jSeparateur);

        menuResetVue.setText("Réinitialiser la fenêtre");
        menuResetVue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResetVueActionPerformed(evt);
            }
        });
        fenetreMenu.add(menuResetVue);

        menuResetCouleur.setText("Réinitialiser les couleurs");
        menuResetCouleur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResetCouleurActionPerformed(evt);
            }
        });
        fenetreMenu.add(menuResetCouleur);

        jMenuBar1.add(fenetreMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boutonSudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonSudActionPerformed
        modeVue = ModeVue.COTE;
        orientation = Orientation.SUD;
        controleur.setModeVue(ModeVue.COTE);
        controleur.setCurrentCote(orientation);
        boutonSud.setSelected(true);
        faceComboBox.setEnabled(true);
        labelPositionSouris.setVisible(true);
        controleur.refreshCotes();
        resetPanelSelection();
        canvas.updateZoom();
        boutonPlan.setEnabled(false);
        menuExporterPlanMur.setEnabled(false);
        afficherErreur(modeVue);
    }//GEN-LAST:event_boutonSudActionPerformed

    private void boutonPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonPlanActionPerformed
        switch(face){
            case EXTERIEUR:
                modeVue = ModeVue.PLAN_DECOUPE_EXTERIEUR;
                break;
            case INTERIEUR:
                modeVue = ModeVue.PLAN_DECOUPE_INTERIEUR;
                break;
        }
        controleur.setModeVue(modeVue);
        boutonPlan.setSelected(true);
        faceComboBox.setEnabled(true);
        labelPositionSouris.setVisible(false);
        resetPanelSelection();
        canvas.updateZoom();
        afficherErreur(modeVue);
    }//GEN-LAST:event_boutonPlanActionPerformed

    private void boutonDessusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonDessusActionPerformed
        modeVue = ModeVue.DESSUS;
        faceComboBox.setEnabled(false);
        labelPositionSouris.setVisible(false);
        controleur.setModeVue(ModeVue.DESSUS);
        boutonDessus.setSelected(true);
        controleur.refreshSalle();
        resetPanelSelection();
        canvas.updateZoom();
        boutonPlan.setEnabled(false);
        menuExporterPlanMur.setEnabled(false);
        afficherErreur(modeVue);
    }//GEN-LAST:event_boutonDessusActionPerformed

    private void boutonNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonNordActionPerformed
        modeVue = ModeVue.COTE;
        orientation = Orientation.NORD;
        faceComboBox.setEnabled(true);
        controleur.setModeVue(ModeVue.COTE);
        controleur.setCurrentCote(orientation);
        boutonNord.setSelected(true);
        labelPositionSouris.setVisible(true);
        controleur.refreshCotes();
        resetPanelSelection();
        canvas.updateZoom();
        boutonPlan.setEnabled(false);
        menuExporterPlanMur.setEnabled(false);
        afficherErreur(modeVue);
    }//GEN-LAST:event_boutonNordActionPerformed

    private void boutonEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonEstActionPerformed
        modeVue = ModeVue.COTE;
        orientation = Orientation.EST;
        faceComboBox.setEnabled(true);
        controleur.setModeVue(ModeVue.COTE);
        controleur.setCurrentCote(orientation);
        boutonEst.setSelected(true);
        labelPositionSouris.setVisible(true);
        controleur.refreshCotes();
        resetPanelSelection();
        canvas.updateZoom();
        boutonPlan.setEnabled(false);
        menuExporterPlanMur.setEnabled(false);
        afficherErreur(modeVue);
    }//GEN-LAST:event_boutonEstActionPerformed

    private void boutonOuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonOuestActionPerformed
        modeVue = ModeVue.COTE;
        orientation = Orientation.OUEST;
        faceComboBox.setEnabled(true);
        controleur.setModeVue(ModeVue.COTE);
        controleur.setCurrentCote(orientation);
        boutonOuest.setSelected(true);
        labelPositionSouris.setVisible(true);
        controleur.refreshCotes();
        resetPanelSelection();
        canvas.updateZoom();
        boutonPlan.setEnabled(false);
        menuExporterPlanMur.setEnabled(false);
        afficherErreur(modeVue);
    }//GEN-LAST:event_boutonOuestActionPerformed

    private void menuNouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNouveauActionPerformed

        int retour = JOptionPane.showConfirmDialog(this, 
              "Voulez-vous sauvegarder votre salle actuelle avant ?", 
               "Créer une nouvelle salle",
            JOptionPane.YES_NO_OPTION);
        
        if (retour == JOptionPane.YES_OPTION) {
            if(controleur.canAutoSave()) {
                controleur.enregistrerFichier();
            } else {
                menuEnregistrerSousActionPerformed(evt);
            }
        }
        
        modeVue = ModeVue.DESSUS;
        controleur.setModeVue(modeVue);
        controleur.setCurrentCote(Orientation.NORD);
        boutonDessus.setSelected(true);
        controleur.createNouvelleSalle();
        resetPanelSelection();
        setParametresSalle();
        canvas.repaint();
    }//GEN-LAST:event_menuNouveauActionPerformed

    private void menuOuvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOuvrirActionPerformed
        int retour = JOptionPane.showConfirmDialog(this, 
              "Voulez-vous sauvegarder votre salle actuelle avant ?", 
               "Ouvrir une salle",
            JOptionPane.YES_NO_OPTION);
        
        if (retour == JOptionPane.YES_OPTION) {
            if(controleur.canAutoSave()) {
                controleur.enregistrerFichier();
            } else {
                menuEnregistrerSousActionPerformed(evt);
            }
        }
        
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Ouvrir salle");
        retour = fileChooser.showOpenDialog(MainWindow.this);
        
        if (retour == JFileChooser.APPROVE_OPTION) {
            controleur.loadSalleFromFile(fileChooser.getSelectedFile());
            if(modeVue == ModeVue.DESSUS) {
                controleur.refreshSalle();
            } else if (modeVue == ModeVue.COTE) {
                controleur.refreshCotes();
            }
            
            resetPanelSelection();
            setParametresSalle();
            canvas.updateZoom();
        }
        
    }//GEN-LAST:event_menuOuvrirActionPerformed

    private void menuEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEnregistrerActionPerformed
        if(controleur.canAutoSave()) {
            controleur.enregistrerFichier();
        } else {
            menuEnregistrerSousActionPerformed(evt);
        }
    }//GEN-LAST:event_menuEnregistrerActionPerformed

    
    private void menuEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEnregistrerSousActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Sauvegarder une salle");
        int retour = fileChooser.showSaveDialog(MainWindow.this);
        if (retour == JFileChooser.APPROVE_OPTION) {
            controleur.enregistrerFichier(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_menuEnregistrerSousActionPerformed

    private void menuExporterPlanSalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExporterPlanSalleActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Exporter les Plans de la salle");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retour = fileChooser.showSaveDialog(MainWindow.this);
        if (retour == JFileChooser.APPROVE_OPTION) {
            try{
                controleur.savePlansSalle(fileChooser.getSelectedFile().getPath());
            } catch (IOException ex){
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_menuExporterPlanSalleActionPerformed

    private void menuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRedoActionPerformed
        controleur.redo();
        resetPanelSelection();
        setParametresSalle();
        canvas.updateZoom();
    }//GEN-LAST:event_menuRedoActionPerformed

    private void boutonDeplacementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonDeplacementActionPerformed
        modeApplication = ModeApplication.DEPLACEMENT;
    }//GEN-LAST:event_boutonDeplacementActionPerformed

    private void boutonSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonSelectionActionPerformed
        modeApplication = ModeApplication.SELECTION;
    }//GEN-LAST:event_boutonSelectionActionPerformed

    private void boutonAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAjoutActionPerformed
        modeApplication = ModeApplication.AJOUT;
    }//GEN-LAST:event_boutonAjoutActionPerformed

    private void canvasMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvasMouseWheelMoved
        if (modeApplication == ModeApplication.DEPLACEMENT) {
            double facteurZoom = canvas.getFacteurZoom();
            if (evt.getWheelRotation() < 0) {
                canvas.setFacteurZoom(facteurZoom * 1.1);
            } else if (evt.getWheelRotation() > 0) {
                canvas.setFacteurZoom(facteurZoom / 1.1);
            }
        }
    }//GEN-LAST:event_canvasMouseWheelMoved

    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        if (SwingUtilities.isLeftMouseButton(evt)) {
            hasMoved = true;
            Point destination = evt.getPoint();
            switch (modeApplication){
                case DEPLACEMENT:
                    canvas.deplacerVue(destination);
                break;
                case SELECTION:
                    Point unzoomedDestination = canvas.getUnzoomedPoint(evt.getPoint());
                    switch (modeVue){
                        case DESSUS:
                            controleur.deplacerSelectionVueDessus(unzoomedDestination);
                            setParametresSeparateur();
                            canvas.repaint();
                            break;
                        case COTE:
                            controleur.deplacerSelectionVueCote(orientation, face, unzoomedDestination);
                            TypePolygone type = controleur.getSelectedType();
                            updateAffichageParametres(type);
                            canvas.repaint();
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_canvasMouseDragged

    private void updateAffichageParametres(TypePolygone type) {
        if (type != null) {
            switch (type) {
                case PORTE:
                case PRISE:
                case FENETRE:
                case RETOUR_AIR:
                    setParametresAccessoire();
                    break;
                case SEPARATEUR:
                    setParametresSeparateur();
                    break;
                case MUR:
                    setParametresMur();
                    break;
                default:
                    break;
            }
        }
    }
    
    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
        if (modeApplication == ModeApplication.DEPLACEMENT && SwingUtilities.isLeftMouseButton(evt)) {
            canvas.commencerDeplacement();
        }
    }//GEN-LAST:event_canvasMousePressed

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        if (modeApplication == ModeApplication.DEPLACEMENT && SwingUtilities.isLeftMouseButton(evt)) {
            canvas.repaint();
        } else if (modeApplication == ModeApplication.SELECTION && controleur.getSelectedType() != null){
            controleur.saveCurrentState();
            afficherErreur(modeVue);
            
            if(hasMoved){
                AccessoireParamDTO accessoireParam = new AccessoireParamDTO(
                tfPositionXAccessoire.getText(),
                tfPositionYAccessoire.getText(),
                tfLongueurAccessoire.getText(),
                tfHauteurAccessoire.getText(),
                tfMargeMarche.getText()
            );
            try{
                controleur.updateSelectedAccessoire(accessoireParam);
            } catch(Exception e){
                System.out.println(e.getMessage());
            }
            setParametresAccessoire();
            canvas.updateZoom();
            }
        }
        hasMoved = false;
    }//GEN-LAST:event_canvasMouseReleased

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
        //un petit exemple de comment gerer le clic de l'utilisateur
        //il faudra peut-etre diviser cela en plusieurs fonctions
        Point coor;
        switch (modeApplication){
            case DEPLACEMENT:
               canvas.updateZoom();
               break;
            case SELECTION:
                if (controleur.getSelectedType() != null) {
                    controleur.removeLastModif();
                }
                coor = canvas.getUnzoomedPoint(evt.getPoint());
                TypePolygone type;
                switch (modeVue){
                    case DESSUS:
                        controleur.refreshSalle();
                        type = controleur.selectVueDessus(coor);
                        canvas.repaint();
                        if (type != null) {
                            switch (type) {
                                case SEPARATEUR:
                                    createOptionsSeparateur();
                                    break;
                                case MUR:
                                    createOptionsMur();
                                    break;
                                default:
                                    break;
                            }
                            menuExporterPlanMur.setEnabled(type == TypePolygone.MUR);
                            type = null;
                        } else {
                            resetPanelSelection();
                            menuExporterPlanMur.setEnabled(false);
                        }
                        break;
                    case COTE:
                        controleur.refreshCotes();
                        type = controleur.selectVueCote(orientation, face, coor);
                        canvas.repaint();
                        if (type != null) {
                            switch (type) {
                                case PORTE:
                                    updatePanelForPorte();
                                    createOptionsAccessoire();
                                    break;
                                case PRISE:
                                    updatePanelForPrise();
                                    createOptionsAccessoire();
                                    break;
                                case FENETRE:
                                    updatePanelForFenetre();
                                    createOptionsAccessoire();
                                    break;
                                case SEPARATEUR:
                                    createOptionsSeparateur();
                                    break;
                                case RETOUR_AIR:
                                    updatePanelForRetourAir();
                                    createOptionsAccessoire();
                                    break;
                                case MUR:
                                    createOptionsMur();
                                    break;
                                default:
                                    break;
                            }
                            menuExporterPlanMur.setEnabled(type == TypePolygone.MUR);
                            type = null;
                        } else {
                            resetPanelSelection();
                            menuExporterPlanMur.setEnabled(false);
                        }
                        break;
                    default:
                        break;
                }
                break;
            case AJOUT:
                coor = canvas.getUnzoomedPoint(evt.getPoint());
                TypeAccessoire typeAccessoire = TypeAccessoire.fromString(ajoutComboBox.getSelectedItem().toString());
                
                switch (modeVue){
                    case DESSUS:
                        if (typeAccessoire == TypeAccessoire.SEPARATEUR) {
                            controleur.addSeparateurVueDessus(coor);
                            modeApplication = ModeApplication.SELECTION;
                            boutonSelection.setSelected(true);
                            createOptionsSeparateur();
                            canvas.repaint();
                        }
                        break;
                    case COTE:
                        if (typeAccessoire == TypeAccessoire.SEPARATEUR) {
                            controleur.addSeparateurVueCote(orientation, face, coor);
                            modeApplication = ModeApplication.SELECTION;
                            boutonSelection.setSelected(true);
                            createOptionsSeparateur();
                        } else {
                            controleur.addAccessoireVueCote(orientation, face, coor, typeAccessoire);
                            switch (typeAccessoire) {
                                case PORTE:
                                    modeApplication = ModeApplication.SELECTION;
                                    boutonSelection.setSelected(true);
                                    updatePanelForPorte();
                                    createOptionsAccessoire();
                                    break;
                                case PRISE:
                                    modeApplication = ModeApplication.SELECTION;
                                    boutonSelection.setSelected(true);
                                    updatePanelForPrise();
                                    createOptionsAccessoire();
                                    break;
                                case FENETRE:
                                    modeApplication = ModeApplication.SELECTION;
                                    boutonSelection.setSelected(true);
                                    updatePanelForFenetre();
                                    createOptionsAccessoire();
                                    break;
                                case RETOUR_AIR:
                                    modeApplication = ModeApplication.SELECTION;
                                    boutonSelection.setSelected(true);
                                    updatePanelForRetourAir();
                                    createOptionsAccessoire();
                                    break;
                                default:
                                    break;
                            }
                        }
                        canvas.repaint();
                        break;
                    default:
                        break;
                }
                canvas.repaint();
                break;

            default:
                break;
        }
        boutonPlan.setEnabled(controleur.isMurSelected());
        afficherErreur(modeVue);
    }//GEN-LAST:event_canvasMouseClicked

    private void menuZoom100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom100ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM);
    }//GEN-LAST:event_menuZoom100ActionPerformed

    private void menuZoom25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom25ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*0.25);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM *0.25);
    }//GEN-LAST:event_menuZoom25ActionPerformed

    private void menuZoom50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom50ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*0.50);
        canvas.setAncienFacteurZoom(0.50);
    }//GEN-LAST:event_menuZoom50ActionPerformed

    private void menuZoom75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom75ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*0.75);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM*0.75);
    }//GEN-LAST:event_menuZoom75ActionPerformed

    private void menuZoom150ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom150ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*1.50);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM*1.50);
    }//GEN-LAST:event_menuZoom150ActionPerformed

    private void menuZoom175ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom175ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*1.75);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM*1.75);
    }//GEN-LAST:event_menuZoom175ActionPerformed

    private void menuZoom200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom200ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*2);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM*2);
    }//GEN-LAST:event_menuZoom200ActionPerformed

    private void menuZoom125ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuZoom125ActionPerformed
        canvas.setFacteurZoom(INITIAL_ZOOM*1.25);
        canvas.setAncienFacteurZoom(INITIAL_ZOOM*1.25);
    }//GEN-LAST:event_menuZoom125ActionPerformed

    private void menuVueNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueNordActionPerformed
        boutonNordActionPerformed(evt);
    }//GEN-LAST:event_menuVueNordActionPerformed

    private void menuVueSudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueSudActionPerformed
        boutonSudActionPerformed(evt);
    }//GEN-LAST:event_menuVueSudActionPerformed

    private void menuVueOuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueOuestActionPerformed
        boutonOuestActionPerformed(evt);
    }//GEN-LAST:event_menuVueOuestActionPerformed

    private void menuVueEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueEstActionPerformed
        boutonEstActionPerformed(evt);
    }//GEN-LAST:event_menuVueEstActionPerformed

    private void menuVueDePlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVueDePlanActionPerformed
        boutonDessusActionPerformed(evt);
    }//GEN-LAST:event_menuVueDePlanActionPerformed

    private void faceComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_faceComboBoxItemStateChanged
        face = Face.fromString((String) this.faceComboBox.getSelectedItem());
        canvas.updateZoom();
    }//GEN-LAST:event_faceComboBoxItemStateChanged

    private void menuResetVueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResetVueActionPerformed
        menuZoom100ActionPerformed(evt);
        canvas.resetDecalage();
    }//GEN-LAST:event_menuResetVueActionPerformed

    private void boutonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonApplyActionPerformed
        SalleParamDTO salleParamDTO = getSalleParam();
        try{    
            controleur.setEspacementGrille(tfEspaceGrille.getText());
            controleur.updateSalle(salleParamDTO);
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        canvas.updateZoom();
        controleur.refreshSalle();
        if(modeVue == ModeVue.PLAN_DECOUPE_EXTERIEUR || modeVue == ModeVue.PLAN_DECOUPE_INTERIEUR){
            switch(orientation){
                case NORD:
                    boutonNord.doClick();
                    break;
                case SUD:
                    boutonSud.doClick();
                    break;
                case EST:
                    boutonEst.doClick();
                    break;
                case OUEST:
                    boutonOuest.doClick();
                    break;
            }
        }
        menuExporterPlanMur.setEnabled(false);
    }//GEN-LAST:event_boutonApplyActionPerformed

    private void menuChangerCouleurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuChangerCouleurActionPerformed
        PopupColor p = new PopupColor(this, elementCouleur);
        p.setVisible(true);
    }//GEN-LAST:event_menuChangerCouleurActionPerformed

    private void menuResetCouleurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResetCouleurActionPerformed
        elementCouleur = new ElementCouleur();
        canvas.repaint();
    }//GEN-LAST:event_menuResetCouleurActionPerformed

    private void setParametresSalle() {
        SalleParamDTO salleParam = controleur.getSalleParamDTO();
        if(salleParam != null){
            tfLongueur.setText(salleParam.longueur());
            tfLargeur.setText(salleParam.largeur());
            tfHauteur.setText(salleParam.hauteur());
            tfEpaisseur.setText(salleParam.epaisseur());
            tfMargePliage.setText(salleParam.margePliage());
            tfMargeRepli.setText(salleParam.margeRepli());
            tfHauteurRetourAir.setText(salleParam.hauteurRetourAir());
            tfDistanceSolRetourAir.setText(salleParam.distanceSolRetourAir());
            tfHauteurTrouRetourAir.setText(salleParam.hauteurTrouRetourAir());
            tfLongueurPliSoudure.setText(salleParam.longueurPliSoudure());
            tfAnglePliSoudure.setText(salleParam.anglePliSoudure());
        }
    }
    
    private void setParametresSeparateur() {
        SeparateurParamDTO separateurParam = controleur.getSelectedSeparateurParamDTO();
        if (separateurParam != null) {
            tfPositionSeparateur.setText(separateurParam.position());
        }
    }
    private void setParametresAccessoire() {
        AccessoireParamDTO accessoireParam = controleur.getSelectedAccessoireParamDTO();
        if(accessoireParam != null){
            tfPositionXAccessoire.setText(accessoireParam.positionX());
            tfPositionYAccessoire.setText(accessoireParam.positionY());
            tfLongueurAccessoire.setText(accessoireParam.longueur());
            tfHauteurAccessoire.setText(accessoireParam.hauteur());
            tfMargeMarche.setText(accessoireParam.margeMarche());
        }
    }
    
    private void setParametresMur() {
        MurParamDTO murParam = controleur.getSelectedMurParamDTO();
        if(murParam != null){
            tfPositionXMur.setText(murParam.positionX());
            tfLongueurMur.setText(murParam.longueur());
            tfHauteurMur.setText(murParam.hauteur());
            tfPoidsInterieur.setText(murParam.poidsPanneauInterieur());
            tfPoidsExterieur.setText(murParam.poidsPanneauExterieur());
        }
    }
    
    
    
    private void boutonApplySeparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonApplySeparateurActionPerformed
        SeparateurParamDTO separateurParam = new SeparateurParamDTO(tfPositionSeparateur.getText());
        try{
            controleur.updateSelectedSeparateur(separateurParam);
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        canvas.updateZoom();
    }//GEN-LAST:event_boutonApplySeparateurActionPerformed

    private void boutonCancelSalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonCancelSalleActionPerformed
        setParametresSalle();
    }//GEN-LAST:event_boutonCancelSalleActionPerformed

    private void boutonCancelSeparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonCancelSeparateurActionPerformed
        setParametresSeparateur();
    }//GEN-LAST:event_boutonCancelSeparateurActionPerformed

    private void boutonDeleteSeparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonDeleteSeparateurActionPerformed
        controleur.removeSelectedSeparateur();
        resetPanelSelection();
        controleur.refreshSalle();
        canvas.updateZoom();
    }//GEN-LAST:event_boutonDeleteSeparateurActionPerformed

    private void boutonApplyAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonApplyAccessoireActionPerformed
        AccessoireParamDTO accessoireParam = new AccessoireParamDTO(
                tfPositionXAccessoire.getText(),
                tfPositionYAccessoire.getText(),
                tfLongueurAccessoire.getText(),
                tfHauteurAccessoire.getText(),
                tfMargeMarche.getText()
        );
        try{
            controleur.updateSelectedAccessoire(accessoireParam);
        } catch(Exception e){
            System.out.println(e.getMessage());
        }
        setParametresAccessoire();
        canvas.updateZoom();
        
    }//GEN-LAST:event_boutonApplyAccessoireActionPerformed

    private void boutonDeleteAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonDeleteAccessoireActionPerformed
        controleur.removeSelectedAccessoire();
        resetPanelSelection();
        canvas.updateZoom();
    }//GEN-LAST:event_boutonDeleteAccessoireActionPerformed

    private void boutonCancelAccessoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonCancelAccessoireActionPerformed
        setParametresAccessoire();
    }//GEN-LAST:event_boutonCancelAccessoireActionPerformed

    private void panelParametresStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_panelParametresStateChanged
        setParametresSalle();
    }//GEN-LAST:event_panelParametresStateChanged

    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        Point point = canvas.getUnzoomedPoint(canvas.getMouseRelativePosition());
        ImperialPointDTO imperialPoint = controleur.convertPointToImperialPointDTO(point,face,orientation);
        labelPositionSouris.setText("Position du curseur : " + imperialPoint.toString());
    }//GEN-LAST:event_canvasMouseMoved

    private void editionMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_editionMenuMenuSelected
        menuUndo.setEnabled(controleur.canUndo());
        menuRedo.setEnabled(controleur.canRedo());
    }//GEN-LAST:event_editionMenuMenuSelected

    private void menuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUndoActionPerformed
        controleur.undo();
        resetPanelSelection();
        setParametresSalle();
        canvas.updateZoom();
    }//GEN-LAST:event_menuUndoActionPerformed

    private void boutonUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonUndoActionPerformed
        menuUndoActionPerformed(evt);
    }//GEN-LAST:event_boutonUndoActionPerformed

    private void boutonRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonRedoActionPerformed
        menuRedoActionPerformed(evt);
    }//GEN-LAST:event_boutonRedoActionPerformed

    private void menuExporterPlanMurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExporterPlanMurActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Exporter les Plans de du mur");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retour = fileChooser.showSaveDialog(MainWindow.this);
        if (retour == JFileChooser.APPROVE_OPTION) {
            try{
                controleur.savePlansSelectedMur(fileChooser.getSelectedFile().getPath());
            } catch (IOException ex){
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_menuExporterPlanMurActionPerformed
 

    private void tfPoidsExterieurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPoidsExterieurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPoidsExterieurActionPerformed
 
    public JButton getBoutonUndo() {
        return boutonUndo;
    }

    public JButton getBoutonRedo() {
        return boutonRedo;
    }
    
    public ControleurSalle getSalleControleur() {
        return controleur;
    }
    
    public ModeVue getVue() {
        return modeVue;
    }
    
    public Face getFace() {
        return face;
    }
    
    public Orientation getOrientation() {
        return orientation;
    }
    
    private SalleParamDTO getSalleParam() {
        return new SalleParamDTO(tfLongueur.getText(),tfLargeur.getText(), tfHauteur.getText(),
        tfEpaisseur.getText(), tfMargePliage.getText(), tfMargeRepli.getText(),
        tfHauteurRetourAir.getText(),tfDistanceSolRetourAir.getText(), tfHauteurTrouRetourAir.getText(),
        tfLongueurPliSoudure.getText(), tfAnglePliSoudure.getText());
    }
    
    public void setWantedColor(TypePolygone type, Color newColor) {
        elementCouleur.setCouleur(type, newColor);
        canvas.repaint();
    }
    
    public ElementCouleur getElementCouleur() {
        return elementCouleur;
    }
    
    private void resetPanelSelection() {
        panelSelection.removeAll();
        panelSelection.revalidate();
        panelSelection.repaint();
    }
    
    private void createOptionsSeparateur() {
        resetPanelSelection();
        panelSelection.add(panelOptionsSeparateur);
        panelSelection.revalidate();
        panelSelection.repaint();
        setParametresSeparateur();
    }
    
    private void createOptionsAccessoire() {
        resetPanelSelection();
        panelSelection.add(panelOptionsAccessoire);
        panelSelection.revalidate();
        panelSelection.repaint();
        setParametresAccessoire();
    }
    
    private void createOptionsMur() {
        resetPanelSelection();
        panelSelection.add(panelOptionsMur);
        panelSelection.revalidate();
        panelSelection.repaint();
        setParametresMur();
    }
    
    private void updatePanelForPorte() {
        resetPanelOptionsAccessoire();
        labelTitreAccessoire.setText("Modification d'une porte");
        tfPositionYAccessoire.setEditable(false);
        
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(labelMargeMarche, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelOptionsAccessoire.add(tfMargeMarche, gridBagConstraints);
    }

    private void updatePanelForPrise() {
        resetPanelOptionsAccessoire();
        labelTitreAccessoire.setText("Modification d'une prise");
    }
    
    private void updatePanelForFenetre() {
        resetPanelOptionsAccessoire();
        labelTitreAccessoire.setText("Modification d'une fenêtre");
    }
    
    private void updatePanelForRetourAir() {
        resetPanelOptionsAccessoire();
        labelTitreAccessoire.setText("Modification d'un retour d'air");
        tfPositionXAccessoire.setEditable(false);
        tfPositionYAccessoire.setEditable(false);
        tfHauteurAccessoire.setEditable(false);
    }
    
    private void resetPanelOptionsAccessoire() {
        labelTitreAccessoire.setText("");
        tfPositionXAccessoire.setEditable(true);
        tfPositionYAccessoire.setEditable(true);
        tfHauteurAccessoire.setEditable(true);
        tfLongueurAccessoire.setEditable(true);
        panelOptionsAccessoire.remove(tfMargeMarche);
        panelOptionsAccessoire.remove(labelMargeMarche);
    }
    
    private void afficherErreur(ModeVue modeVue){
        if(modeVue!= ModeVue.DESSUS){
            jTextAreaErreur.setText(controleur.getMessageErreurVueCote());
        } else {
            jTextAreaErreur.setText(controleur.getMessageErreurVueDessus());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ajoutComboBox;
    private javax.swing.JToggleButton boutonAjout;
    private javax.swing.JButton boutonApply;
    private javax.swing.JButton boutonApplyAccessoire;
    private javax.swing.JButton boutonApplySeparateur;
    private javax.swing.JButton boutonCancelAccessoire;
    private javax.swing.JButton boutonCancelSalle;
    private javax.swing.JButton boutonCancelSeparateur;
    private javax.swing.JButton boutonDeleteAccessoire;
    private javax.swing.JButton boutonDeleteSeparateur;
    private javax.swing.JToggleButton boutonDeplacement;
    private javax.swing.JToggleButton boutonDessus;
    private javax.swing.JToggleButton boutonEst;
    private javax.swing.JToggleButton boutonNord;
    private javax.swing.JToggleButton boutonOuest;
    private javax.swing.JToggleButton boutonPlan;
    private javax.swing.JButton boutonRedo;
    private javax.swing.JToggleButton boutonSelection;
    private javax.swing.JToggleButton boutonSud;
    private javax.swing.JButton boutonUndo;
    private javax.swing.ButtonGroup boutonsMode;
    private javax.swing.ButtonGroup boutonsVues;
    private ca.ulaval.glo2004.gui.Canvas canvas;
    private javax.swing.JMenu editionMenu;
    private javax.swing.JComboBox<String> faceComboBox;
    private javax.swing.JMenu fenetreMenu;
    private javax.swing.JMenu fichierMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelParametres;
    private javax.swing.JScrollPane jScrollPaneTextArea;
    private javax.swing.JPopupMenu.Separator jSeparateur;
    private javax.swing.JSeparator jSeparatorDegree;
    private javax.swing.JSeparator jSeparatorLivreMur;
    private javax.swing.JSeparator jSeparatorPouce;
    private javax.swing.JSeparator jSeparatorPouceAccessoire;
    private javax.swing.JSeparator jSeparatorPouceMur;
    private javax.swing.JSeparator jSeparatorPouceSeparateur;
    private javax.swing.JTextArea jTextAreaErreur;
    private javax.swing.JLabel labelAnglePliSoudure;
    private javax.swing.JLabel labelDegree;
    private javax.swing.JLabel labelDistanceSolRetourAir;
    private javax.swing.JLabel labelEpaisseur;
    private javax.swing.JLabel labelHauteur;
    private javax.swing.JLabel labelHauteurAccessoire;
    private javax.swing.JLabel labelHauteurMur;
    private javax.swing.JLabel labelHauteurTrouRetourAir;
    private javax.swing.JLabel labelLargeur;
    private javax.swing.JLabel labelLivreMur;
    private javax.swing.JLabel labelLongueur;
    private javax.swing.JLabel labelLongueur5;
    private javax.swing.JLabel labelLongueurAccessoire;
    private javax.swing.JLabel labelLongueurMur;
    private javax.swing.JLabel labelLongueurPliSoudure;
    private javax.swing.JLabel labelMargeMarche;
    private javax.swing.JLabel labelMargePliage;
    private javax.swing.JLabel labelMargeRepli;
    private javax.swing.JLabel labelPoidsExterieur;
    private javax.swing.JLabel labelPoidsInterieur;
    private javax.swing.JLabel labelPositionSeparateur;
    private javax.swing.JLabel labelPositionSouris;
    private javax.swing.JLabel labelPositionXAccessoire;
    private javax.swing.JLabel labelPositionXMur;
    private javax.swing.JLabel labelPositionYAccessoire;
    private javax.swing.JLabel labelPouce;
    private javax.swing.JLabel labelPouceAccessoire;
    private javax.swing.JLabel labelPouceMur;
    private javax.swing.JLabel labelPouceSeparateur;
    private javax.swing.JLabel labelTitreAccessoire;
    private javax.swing.JLabel labelTitreMur;
    private javax.swing.JLabel labelTitreSeparateur;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem menuChangerCouleur;
    private javax.swing.JMenuItem menuEnregistrer;
    private javax.swing.JMenuItem menuEnregistrerSous;
    private javax.swing.JMenuItem menuExporterPlanMur;
    private javax.swing.JMenuItem menuExporterPlanSalle;
    private javax.swing.JMenuItem menuNouveau;
    private javax.swing.JMenuItem menuOuvrir;
    private javax.swing.JMenuItem menuRedo;
    private javax.swing.JMenuItem menuResetCouleur;
    private javax.swing.JMenuItem menuResetVue;
    private javax.swing.JMenuItem menuUndo;
    private javax.swing.JMenuItem menuVueDePlan;
    private javax.swing.JMenuItem menuVueEst;
    private javax.swing.JMenuItem menuVueNord;
    private javax.swing.JMenuItem menuVueOuest;
    private javax.swing.JMenuItem menuVueSud;
    private javax.swing.JMenu menuVues;
    private javax.swing.JMenu menuVuesCote;
    private javax.swing.JMenu menuZoom;
    private javax.swing.JMenuItem menuZoom100;
    private javax.swing.JMenuItem menuZoom125;
    private javax.swing.JMenuItem menuZoom150;
    private javax.swing.JMenuItem menuZoom175;
    private javax.swing.JMenuItem menuZoom200;
    private javax.swing.JMenuItem menuZoom25;
    private javax.swing.JMenuItem menuZoom50;
    private javax.swing.JMenuItem menuZoom75;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelMode;
    private javax.swing.JPanel panelOptionsAccessoire;
    private javax.swing.JPanel panelOptionsMur;
    private javax.swing.JPanel panelOptionsSeparateur;
    private javax.swing.JTabbedPane panelParametres;
    private javax.swing.JPanel panelSalle;
    private javax.swing.JPanel panelSelection;
    private javax.swing.JPanel panelVues;
    private javax.swing.JTextField tfAnglePliSoudure;
    private javax.swing.JTextField tfDistanceSolRetourAir;
    private javax.swing.JTextField tfEpaisseur;
    private javax.swing.JTextField tfEspaceGrille;
    private javax.swing.JTextField tfHauteur;
    private javax.swing.JTextField tfHauteurAccessoire;
    private javax.swing.JTextField tfHauteurMur;
    private javax.swing.JTextField tfHauteurRetourAir;
    private javax.swing.JTextField tfHauteurTrouRetourAir;
    private javax.swing.JTextField tfLargeur;
    private javax.swing.JTextField tfLongueur;
    private javax.swing.JTextField tfLongueurAccessoire;
    private javax.swing.JTextField tfLongueurMur;
    private javax.swing.JTextField tfLongueurPliSoudure;
    private javax.swing.JTextField tfMargeMarche;
    private javax.swing.JTextField tfMargePliage;
    private javax.swing.JTextField tfMargeRepli;
    private javax.swing.JTextField tfPoidsExterieur;
    private javax.swing.JTextField tfPoidsInterieur;
    private javax.swing.JTextField tfPositionSeparateur;
    private javax.swing.JTextField tfPositionXAccessoire;
    private javax.swing.JTextField tfPositionXMur;
    private javax.swing.JTextField tfPositionYAccessoire;
    // End of variables declaration//GEN-END:variables
}
